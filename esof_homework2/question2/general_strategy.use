--This is a USE model that has embedded SOIL operations to model a generic strategy patern design pattern

model GeneralStrategyPattern

--classes
abstract class AbstractContext
attributes
	strategyA : IStrategyA
	strategyB : IStrategyB
  resultA:String init : ' '
  resultB:String init : ' '
operations
	show()
	performStrategyA()
		begin
			self.resultA:=self.strategyA.doAction()
		end
	setStrategyA(s1:IStrategyA)
		begin
			self.strategyA := s1
		end
	performStrategyB()
		begin
			self.resultB := self.strategyB.doAction()
		end
	setStrategyB(s2:IStrategyB)
		begin
			self.strategyB := s2;
		end
end

class ConcreteContext1 < AbstractContext
attributes -- None
operations
	show()
end

class ConcreteContext2 < AbstractContext
attributes	--None
operations
	show()
end

class ConcreteContext3 < AbstractContext
attributes	--None
operations
	show()
end

abstract class IStrategyA
attributes	--None
operations
	setAction(s:String)
		begin
		end
	doAction():String
		begin
		end
end

class Concrete1StrategyA < IStrategyA
attributes
  result:String
operations
	setAction(s:String)
		begin
			self.result:=s
		end
	doAction():String
		begin
			result:=self.result;

		end
end

class Concrete2StrategyA < IStrategyA
attributes
	result:String
operations
	setAction(s:String)
		begin
			self.result:=s
		end
	doAction():String
		begin
			result:=self.result;
		end
end

class Concrete3StrategyA < IStrategyA
attributes
	result:String
operations
	setAction(s:String)
		begin
			self.result:=s
		end
	doAction():String
		begin
			result:=self.result;
		end
end

abstract class IStrategyB
attributes
	--None
operations
	setAction(s:String)
		begin
		end
	doAction():String
		begin
		end
end

class Concrete1StrategyB < IStrategyB
attributes
	result:String
operations
	setAction(s:String)
		begin
			self.result:=s
		end
	doAction():String
		begin
			result:=self.result;
		end
end

class Concrete2StrategyB < IStrategyB
attributes
	result:String
operations
	setAction(s:String)
		begin
			self.result:=s
		end
	doAction():String
		begin
			result:=self.result;
		end
end

--associations
association AbstractContextHasAnIStrategyA between
	AbstractContext[0..*] role abstractObj
	IStrategyA[1] role strategyA
end

association AbstractContextHasAnIStrategyB between
	AbstractContext[0..*] role abstractObj
	IStrategyB[1] role strategyB
end

constraints

context AbstractContext::setStrategyA(s1:IStrategyA)
post: self.strategyA.oclIsTypeOf(IStrategyA)

context AbstractContext::setStrategyB(s2:IStrategyB)
post: self.strategyB.oclIsTypeOf(IStrategyB)

context IStrategyA::doAction():String
post: abstractObj.resultA->notEmpty

context IStrategyB::doAction():String
post: abstractObj.resultB->notEmpty
