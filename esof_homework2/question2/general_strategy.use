--This is a USE model that has embedded SOIL operations to model a generic strategy patern design pattern

model GeneralStrategyPattern

--classes
abstract class AbstractContext
attributes
	strategyA : IStrategyA
	strategyB : IStrategyB
  resultA:String init : ' '
  resultB:String init : ' '
operations
	show()
	performStrategyA()
		begin
			self.resultA:=self.strategyA.doAction()
		end
	setStrategyA(s1:IStrategyA)
		begin
			self.strategyA := s1
		end
	performStrategyB()
		begin
			self.resultB := self.strategyB.doAction()
		end
	setStrategyB(s2:IStrategyB)
		begin
			self.strategyB := s2;
		end
end

class ConcreteContext1 < AbstractContext
attributes -- None
operations
	show()
end

class ConcreteContext2 < AbstractContext
attributes	--None
operations
	show()
end

class ConcreteContext3 < AbstractContext
attributes	--None
operations
	show()
end

abstract class IStrategyA
attributes	--None
operations
	doAction():String
    begin
    end
end

class Concrete1StrategyA < IStrategyA
attributes
  action_result:String
operations
	doAction():String
		begin
			result:=self.action_result;
		end
end

class Concrete2StrategyA < IStrategyA
attributes
  action_result:String
operations
	doAction():String
		begin
			result:=self.action_result;
		end
end

class Concrete3StrategyA < IStrategyA
attributes
	action_result:String
operations
	doAction():String
		begin
			result:=self.action_result;
		end
end

abstract class IStrategyB
attributes
	--None
operations
	doAction():String
    begin
    end
end

class Concrete1StrategyB < IStrategyB
attributes
	action_result:String
operations
	doAction():String
		begin
			result:=self.action_result;
		end
end

class Concrete2StrategyB < IStrategyB
attributes
	action_result:String
operations
	doAction():String
		begin
			result:=self.action_result;
		end
end

--associations
association AbstractContextHasAnIStrategyA between
	AbstractContext[0..*] role abstractObj
	IStrategyA[1] role sA
end

association AbstractContextHasAnIStrategyB between
	AbstractContext[0..*] role abstractObj
	IStrategyB[1] role sB
end

--constraints
constraints
context AbstractContext::setStrategyA(s1:IStrategyA)
post: self.strategyA.isDefined()

context AbstractContext::setStrategyB(s2:IStrategyB)
post: self.strategyB.isDefined()

context AbstractContext::performStrategyA()
pre: self.strategyA.isDefined()
post: self.resultA <>''

context AbstractContext::performStrategyB()
pre: self.strategyB.isDefined()
post: self.resultB <> ''

--context Concrete1StrategyA::doAction():String
--post: self.action_result = abstractObj.resultA->any(x | x = self.action_result)

--context Concrete2StrategyA::doAction():String
--post: self.action_result = abstractObj.resultA->any(x | x = self.action_result)

--context Concrete3StrategyA::doAction():String
--post: self.action_result = abstractObj.resultA->any(x | x = self.action_result)

--context Concrete1StrategyB::doAction():String
--post: self.action_result = abstractObj.resultB->any(x | x = self.action_result)

--context Concrete2StrategyB::doAction():String
--post: self.action_result = abstractObj.resultB->any(x | x = self.action_result)
