model FirstPersonShooterGame
enum Strength {defeatable, undefeatable}
enum weaponType {sword, shield, arrows}
--classes

/*
 * The State pattern interface
 */
abstract class PlayerState
 operations
   landBlow()
    begin
    end
   getWeapon(w:Weapon)
    begin
    end
   seeOpponent()
     begin
     end
   lostOpponent()
     begin
     end
   receiveBlow(i:Integer)
     begin
     end
end

class Neutral < PlayerState
operations
   landBlow()
    begin
      WriteLine('In state: neutral operation:landBlow, YOU HAVE NO OPPONENT TO HIT');
    end
   getWeapon(w:Weapon)
    begin
      WriteLine('In state:neutral operation:getWeapon WEAPON ACQUIRE');
      self.player.weapon := w;
      if(w.type = weaponType::sword) then
        self.player.weapon.power := 25;
      end;
      if(w.type = weaponType::arrows) then
        self.player.weapon.power := 10;
      end;
      if(w.type = weaponType::shield) then
        self.player.weapon.power := 30;
      end;
    end
   seeOpponent()
   begin
      declare opStrength:Strength;
      WriteLine('In state:neutral operation:seeOpponent:');
      opStrength := self.player.opponent.strength;

      if (opStrength = Strength::undefeatable) then
        self.player.playerState := self.player.panicState;
      end;
      if (opStrength = Strength::defeatable) then
        self.player.playerState := self.player.attackState;
      end;
   end

   lostOpponent()
   begin
      WriteLine('In state:neutralState operation:lostOpponent YOU DO NOT YET HAVE AN OPPONENT TO LOSE');
   end

   receiveBlow(i:Integer)
   begin
     WriteLine('In state:neutralState operation:receiveBlow');
     self.player.health := self.player.health - i;
     self.player.playerState := self.player.panicState;
  end
end

class Panic < PlayerState
operations
 landBlow()
  begin
    WriteLine('In state:panic operation:landBlow, TOO PANICKED');
  end
 getWeapon(w:Weapon)
  begin
    WriteLine('In state:panic operation:getWeapon TOO LATE, ALREADY IN PANIC MODE');
  end
 seeOpponent()
   begin
      declare opStrength:Strength;
      WriteLine('In state:panic operation:seeOpponent:');
      opStrength := self.player.opponent.strength;

      if (opStrength = Strength::undefeatable) then
        WriteLine('Opponent UNDEFEATABLE, CONTINUE TO PANIC');
      end;
      if (opStrength = Strength::defeatable) then
        self.player.playerState := self.player.attackState;
      end;
   end
 lostOpponent()
   begin
      WriteLine('In state:panicState operation:lostOpponent');
      self.player.playerState := self.player.neutralState;
   end

 receiveBlow(i:Integer)
  begin
      WriteLine('In state:panicState operation:receiveBlow');
      if(self.player.weapon.type = weaponType::shield) then
        self.player.health := self.player.health + self.player.weapon.power;
      end;
      self.player.health := self.player.health - i;
      if (self.player.health = 0) then
        self.player.playerState := self.player.dieState;
        self.player.alive := false
      end;
      if (self.player.health > 10 and self.player.opponent.strength = Strength::defeatable) then
        self.player.playerState := self.player.attackState;
      end;
  end
end

class Attack < PlayerState
operations
 getWeapon(w:Weapon)
  begin
    WriteLine('In state:attack operation:getWeapon TOO LATE, ALREADY IN ATTACK MODE');
  end
 seeOpponent()
   begin
      WriteLine('In state:attackState operation:seeOpponent YOU HAVE ALREADY SEEN OPPONENT, ATTACK!');
   end
 lostOpponent()
   begin
      WriteLine('In state:attackState operation:lostOpponent');
      self.player.playerState := self.player.neutralState;
   end
 landBlow()
  begin
    if(self.player.weapon.type = weaponType::shield) then
      WriteLine('In state:attackState operation:landBlow, YOU HAVE A DEFENSIVE WEAPON')
    end;
    if(self.player.weapon.type = weaponType::arrows or self.player.weapon.type = weaponType::sword) then
      self.player.opponent.health := self.player.opponent.health - self.player.weapon.power;
    end;
    if(self.player.weapon.type = null) then
      WriteLine('In state:attackState operation:landBlow, YOU HAVE NO WEAPON')
    end;
  end
 receiveBlow(i:Integer)
   begin
       WriteLine('In state:attackState operation:receiveBlow');
       self.player.health := self.player.health - i;
       if (self.player.health = 0) then
         self.player.playerState := self.player.dieState;
         self.player.alive := false
       end;
       if (self.player.health < 10 and self.player.health > 0) then
        self.player.playerState := self.player.panicState;
       end;
   end
end

class Die < PlayerState
operations
  landBlow()
    begin
    WriteLine('In state:die operation:landBlow YOU ARE DEAD');
    end
  getWeapon(w:Weapon)
    begin
    WriteLine('In state:die operation:getWeapon YOU ARE DEAD');
    end
  seeOpponent()
   begin
   WriteLine('In state:dieState operation:seeOpponent YOU ARE DEAD');
   end
  lostOpponent()
   begin
   WriteLine('In state:dieState operation:lostOpponent YOU ARE DEAD');
   end
  receiveBlow(i:Integer)
   begin
   WriteLine('In state:dieState operation:receiveBlow YOU ARE DEAD');
   end
end

class Opponent
attributes
  strength : Strength
  health : Real
operations
  initInstance()
  begin
    self.strength := Strength::defeatable;
    self.health := 100;
  end
end

class Weapon
attributes
  type : weaponType
  power : Real
end

class Player
attributes
	alive : Boolean
	health : Real
  playerState : PlayerState
  panicState : PlayerState
  attackState : PlayerState
  dieState : PlayerState
  neutralState : PlayerState
  opponent : Opponent
  weapon : Weapon
operations
  /* create a new Player */
  initInstance()
  begin
    self.alive := true;
    self.health :=100;
    self.panicState := new Panic;
    self.attackState := new Attack;
    self.dieState := new Die;
    self.neutralState := new Neutral;
    self.playerState := self.neutralState;
    self.opponent := new Opponent;
    self.opponent.initInstance();
    self.weapon := new Weapon;
    self.weapon.power := 0;
  end
  landBlow()
    begin
      self.playerState.landBlow();
    end
  getWeapon(w:Weapon)
    begin
      self.playerState.getWeapon(w);
    end
	seeOpponent()
	begin
		self.playerState.seeOpponent();
	end
	receiveBlow(i:Integer)
  begin
    self.playerState.receiveBlow(i);
  end
	lostOpponent()
    begin
      self.playerState.lostOpponent();
    end

statemachines
  psm PlayerState
  states
  startUp:initial
  neutralState      [playerState = neutralState]
  attackState       [playerState = attackState]
  panicState      [playerState = panicState]
  dieState   [playerState = dieState]
  --game over
  endState:final
  transitions
  startUp -> neutralState {create}
  neutralState -> attackState { seeOpponent()[opponent.strength = Strength::defeatable]}
  neutralState -> panicState { seeOpponent()[opponent.strength = Strength::undefeatable]}
  neutralState -> panicState { receiveBlow() [health > 0]}
  neutralState -> dieState { receiveBlow() [health = 0]}
  attackState -> neutralState { lostOpponent() }
  attackState -> attackState {receiveBlow() [health>0]}
  --attackState -> attackState {landBlow()}
  attackState -> panicState {receiveBlow() [health < 10 and health>0]}
  attackState -> dieState {receiveBlow() [health=0]}
  panicState -> neutralState { lostOpponent()}
  panicState -> attackState { seeOpponent()[opponent.strength = Strength::defeatable]}
  panicState -> panicState { seeOpponent()[opponent.strength = Strength::undefeatable]}
  panicState -> attackState { receiveBlow() [health>10 and opponent.strength = Strength::defeatable]}
  panicState -> panicState {receiveBlow() [health>0]}
  panicState -> dieState { receiveBlow() [health=0] }
  dieState -> dieState {[playerState=dieState] seeOpponent()}
  dieState-> dieState {[playerState=dieState]  receiveBlow()}
  dieState -> dieState {[playerState=dieState] lostOpponent()}
  dieState -> endState
  end
end

-- associations
association stateOfPlayer between
Player[1]
PlayerState[1]
end

association opponentOfPlayer between
Player[1]
Opponent[1]
end

association weaponOfPlayer between
Player[1]
Weapon[1]
end
